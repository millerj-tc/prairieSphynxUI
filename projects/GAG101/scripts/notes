
- how to do each of these steps, show dialogue, select preselected enemy team, process, record the result, load the next one, etc. (load to journal class that uses browser and later can link to firebase)

The Dance of Riddles -- (highest average across team: speed, charisma, cunning) (Doran can whisper into people's ear for an additional +2) -- enemies:feys

The Watch of Silence (best charater: toughness - speed) -- meditation (include this in a stage of the PvP so Yetelu is good) - enemy: mystic cat

The Test of the Weald (toughness + (10-charisma)) -- if you beat this you unlock Yetelu "You have fought nobly, young one. This Yetelu yearns to see where you may roam, here or yonder. Consider this Yetelu an ally as strong as a yew, yielding assistance on whatever quests you may yen to essay."

For the actual GAG consider the locations more like "stations" within a close area so it's easier to explain why actions are affecting each other or maybe some characters can even show up at multiple stations under some circumstances.
Remember that even discovering an interaction isn't "good" a player can still get a World First medal for it.

- Achivement tracker (journal?)

- Machabree's as location?








Next:

dimmer domui artist
+display scenarioActive cards
uiInputHandler
event listener on displayed cards to activate them for phase (and assign them to player's team)



"cardScenario" should be able to exist within/alongside hyperlinkIFNav

maybe in PvE you could even use a cardScenario selection to affect which choices you can make?

A card may exist in...
the master list (every card that could exist in it's basic form)
the player collection (each card the player has access to, potentially with properties that change over time)
the scenario level (cards actually loaded into a scenario which may not belong to any player)
the phase level (properties that only matter for that phase)
the step level (properties that only matter for that step)

//there should be a cardCollectionDataHandler object that holds cardCollectionData objs that point to a card in the master list and hold all the collection props
//the same for:
//cardScenarioDataHandler -> cardScenarioData
//cardPhaseDataHandler -> cardPhaseData
//cardStepDataHandler -> cardStepData

masterCardHandler -> masterCard 
collectionCardHandler -> collectionCard from Object.create(masterCard)
scenarioCardHandler -> scenarioCard from Object.create(collectionCard)
phaseCardHandler -> phaseCard from Object.create(scenarioCard)
stepCardHandler -> stepCard from Object.create(phaseCard)


Assess what card choices are legal (based on potentially both a master list and limitations on the player -- have they unlocked it?)
Display legal card choice slots
Display a randomized or chosen enemy team -- sometimes based on the nature of the scenario
Allow the player to click and choose from among legal options for each slot (sometimes including changing the enemy team)
Allow the player to submit their choices

triggering the simulation -->

Scenario ("adventure") -> Phase ("fight this", "escape that", "climb this") -> Step (anything smaller)

Common steps:
- who has the highest/lowest value of [prop] among cards here?
- who has the highest/lowest value [prop] among cards that player to [player]?
- have a character say dialogue depending on who else is there

Scenario Flow:
- load copies of all cards into a scenario (including unchosen ones that can "appear" mid-simulation, might be cards from firebase)
- choose a starting phase
Phase loop:
    - declare the phase via output (if necesary)
    - choose the starting step
    Step loop:
        - perform step operations
        - determine how the current step ends
        - determine how to move to the next step
    - determine how the current phase ends
    - determine how to move to the next phase
- perform a bunch of operations on the cards, leading changed card properties (changed card properties could be at the step, phase, scenario, or player collection level)
- check what happened and output text to show player what happened (potentially in concise mode)

